<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.imagingbook</groupId>
	<artifactId>imagingbook-parent-pom</artifactId>
	<version>2.0-SNAPSHOT</version>
	<packaging>pom</packaging>

	<name>ImagingBook Parent POM file</name>
	<description>Java code for image processing books by W. Burger and M.J. Burge</description>
	<inceptionYear>2006</inceptionYear>
	<url>http://www.imagingbook.com</url>

	<developers>
		<developer>
			<name>Wilhelm Burger</name>
		</developer>
		<developer>
			<name>Mark J. Burge</name>
		</developer>
	</developers>

	<licenses>
		<license>
			<name>BSD 2-Clause "Simplified" License</name>
			<url>http://opensource.org/licenses/BSD-2-Clause</url>
		</license>
	</licenses>

	<properties>
		<directory-up-1>${project.basedir}${file.separator}..</directory-up-1>
		<directory-up-2>${project.basedir}${file.separator}..${file.separator}..</directory-up-2>
		<directory-up-3>${project.basedir}${file.separator}..${file.separator}..${file.separator}..</directory-up-3>	
		<imagingbook.rootdir>${directory-up-1}</imagingbook.rootdir>   <!-- modified by nested projects -->
		
		
		<imagingbook.ijplugins>false</imagingbook.ijplugins>	<!-- set 'true' if a plugin project (by profile) -->
		<imagingbook.repodir>imagingbook-maven-repository</imagingbook.repodir>
		<imagingbook.docdir>${project.basedir}/docs</imagingbook.docdir>

		<!-- <imagingbook.version>${project.version}</imagingbook.version> -->
		<imagingbook.version>2.0-SNAPSHOT</imagingbook.version>
		<java.version>1.8</java.version>
		<imagej.version>1.53j</imagej.version> <!-- see https://mvnrepository.com/artifact/net.imagej/ij -->
		<commons-math3.version>3.6.1</commons-math3.version>
		<jtransforms.version>3.1</jtransforms.version>
		<itext.version>5.5.13.2</itext.version>
		<openpdf.version>1.3.25</openpdf.version>

		<junit.version>4.13.1</junit.version>
		<!-- <skipTests>false</skipTests> -->
		
		<maven.compiler.target>${java.version}</maven.compiler.target>
	    <maven.compiler.source>${java.version}</maven.compiler.source>

		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
	</properties>

	<repositories>
		<repository>
			<id>${imagingbook.repodir}</id>
			<!-- <id>imagingbook-maven-repository</id> -->
			<name>Imagingbook Maven Repository on GitHub</name>
			<url>https://raw.github.com/imagingbook/imagingbook-maven-repository/master</url>
			<layout>default</layout>
		</repository>
	</repositories>

	<distributionManagement>
		<repository>
			<id>${imagingbook.repodir}</id>     <!-- used by 'mvn deploy' -->
			<!-- <id>imagingbook-maven-repository</id> -->
			<!-- <name>Imagingbook Maven Repository on GitHub</name> -->
			<url>file:///${imagingbook.rootdir}${file.separator}${imagingbook.repodir}</url>
		</repository>
	</distributionManagement>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>net.imagej</groupId>
				<artifactId>ij</artifactId>
				<version>${imagej.version}</version>
				<!-- https://mvnrepository.com/artifact/net.imagej/ij -->
			</dependency>

			<!-- https://mvnrepository.com/artifact/org.apache.commons/commons-math3 -->
			<dependency>
				<groupId>org.apache.commons</groupId>
				<artifactId>commons-math3</artifactId>
				<version>${commons-math3.version}</version>
			</dependency>

			<!-- https://mvnrepository.com/artifact/com.github.wendykierp/JTransforms, 
				https://github.com/wendykierp/JTransforms -->
			<dependency>
				<groupId>com.github.wendykierp</groupId>
				<artifactId>JTransforms</artifactId>
				<version>${jtransforms.version}</version>
				<!-- <classifier>with-dependencies</classifier> -->
			</dependency>

			<!-- https://mvnrepository.com/artifact/com.github.librepdf/openpdf -->
			<dependency>
				<groupId>com.github.librepdf</groupId>
				<artifactId>openpdf</artifactId>
				<version>${openpdf.version}</version>
			</dependency>

			<dependency>
				<groupId>junit</groupId>
				<artifactId>junit</artifactId>
				<version>${junit.version}</version>
				<scope>test</scope>
			</dependency>
			
			<dependency>  <!-- cyclic dependency, is this a problem? -->
				<groupId>com.imagingbook</groupId>
				<artifactId>imagingbook-common</artifactId>
				<version>${imagingbook.version}</version>
				<!-- <version>2.0-SNAPSHOT</version> -->
			</dependency>

		</dependencies>
	</dependencyManagement>

	<dependencies />

	<build>
		<pluginManagement>
			<plugins>
			
				<!-- <plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>3.8.1</version>
					<configuration>
						<source>${java.version}</source>
						<target>${java.version}</target>
					</configuration>
				</plugin> -->

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-dependency-plugin</artifactId>
					<version>3.1.2</version>
				</plugin>

				<!-- Ignore/Execute plugin execution (https://stackoverflow.com/a/8752807) -->
				<!-- https://www.eclipse.org/m2e/documentation/m2e-execution-not-covered.html -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<!-- copy-dependency plugin -->
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.apache.maven.plugins</groupId>
										<artifactId>maven-dependency-plugin</artifactId>
										<versionRange>[1.0.0,)</versionRange>
										<goals>
											<goal>copy-dependencies</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore />
									</action>
								</pluginExecution>

								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.commonjava.maven.plugins</groupId>
										<artifactId>directory-maven-plugin</artifactId>
										<versionRange>[0.1,)</versionRange>
										<goals>
											<goal>directory-of</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore />
									</action>
								</pluginExecution>

								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.apache.maven.plugins</groupId>
										<artifactId>maven-antrun-plugin</artifactId>
										<versionRange>[1.7,)</versionRange>
										<goals>
											<goal>run</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore />
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>

			</plugins>
		</pluginManagement>

		<plugins>

			<!-- skip tests -->
			<!-- <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-surefire-plugin</artifactId> 
				<version>3.0.0-M4</version> <configuration> <skipTests>${skipTests}</skipTests> 
				</configuration> </plugin> -->

			<!-- Directory plugin to find parent root directory absolute path -->
			<!-- <plugin> <groupId>org.commonjava.maven.plugins</groupId> <artifactId>directory-maven-plugin</artifactId> 
				<version>0.1</version> <executions> <execution> <id>directories</id> <goals> 
				<goal>highest-basedir</goal> </goals> <phase>initialize</phase> <configuration> 
				<property>main.basedir</property> </configuration> </execution> </executions> 
				</plugin> -->

			<!-- https://stackoverflow.com/questions/1012402/maven2-property-that-indicates-the-parent-directory/37965143#37965143 -->
			<!-- <plugin> <groupId>org.commonjava.maven.plugins</groupId> <artifactId>directory-maven-plugin</artifactId> 
				<version>0.1</version> <executions> <execution> <id>directories</id> <goals> 
				<goal>directory-of</goal> </goals> <phase>initialize</phase> <configuration> 
				<property>imagingbookFOO.basedir</property> <project> <groupId>com.imagingbook</groupId> 
				<artifactId>imagingbook-parent-pom</artifactId> </project> </configuration> 
				</execution> </executions> </plugin> -->


			<!-- To output the value of certain variables for testing -->
			<plugin>
				<artifactId>maven-antrun-plugin</artifactId>
				<version>3.0.0</version>
				<executions>
					<execution>
						<id>echo</id>
						<phase>initialize</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<target>
								<echo level="info">**** imagingbook.rootdir = ${imagingbook.rootdir}</echo>
								<echo level="info">**** imagingbook.ijplugins = ${imagingbook.ijplugins}</echo>	
							</target>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-release-plugin</artifactId>
				<!-- <version>3.0.0-M1</version> -->
				<configuration>
					<goals>deploy</goals>
					<autoversionsubmodules>true</autoversionsubmodules>
				</configuration>
			</plugin>

			<plugin>  <!-- add more properties to MANIFEST file -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>3.2.0</version>
				<configuration>
					<!-- <useDefaultManifestFile>true</useDefaultManifestFile> --> <!-- not available since version 3.0.0 -->
					<archive>
						<manifest>
							<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
							<addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
						</manifest>
						<manifestEntries>
							<!-- <Build-Date>${buildDate}</Build-Date> -->
							<Build-Time>${maven.build.timestamp}</Build-Time>
						</manifestEntries>
					</archive>
				</configuration>
			</plugin>

			<plugin>  <!-- generate a separate jar file with source code -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
				<version>3.2.1</version>
				<executions>
					<execution>
						<id>attach-sources</id>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<!-- Javadoc generation -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>3.3.0</version>
				<configuration>
					<javadocExecutable>${java.home}/bin/javadoc</javadocExecutable>
					<!-- Default configuration for all reports -->
					<!-- Problem with Java 12: mixing named and unnamed modules?? -->
					<!-- <javadocExecutable>${java.home}/bin/javadoc</javadocExecutable> -->  <!-- add for Java 10, 11, 12 .. -->
					<!-- <source>8</source> -->
					<detectJavaApiLink>false</detectJavaApiLink>
					<reportOutputDirectory>${imagingbook.docdir}</reportOutputDirectory>
					<destDir>javadoc</destDir>
					<!-- <doctitle>${javadoc-doctitle}</doctitle> -->
					<packagesheader>${project.name}</packagesheader>
					<!-- <header>The ImagingBook HEADER</header> -->
					<!-- <footer>The ImagingBook FOOTER</footer> -->
					<!-- <top>The ImagingBook TOP text</top> -->
					<bottom>
	        		<![CDATA[Copyright &#169; {inceptionYear}&#x2013;{currentYear}, 
	        		<a href="http://www.imagingbook.com" target="new">
	        		Wilhelm Burger, Mark J. Burge</a>
	        		<a href="http://opensource.org/licenses/BSD-2-Clause" target="new">
	        		(BSD 2-Clause Simplified License)</a>]]>
					</bottom>
					<show>protected</show>
					<nohelp>true</nohelp>
					<linksource>true</linksource>
					<author>false</author>
					<verbose>true</verbose>
					<!-- <quiet>true</quiet> -->
					<!-- <detectLinks>true</detectLinks> -->
					<!-- <detectOfflineLinks>true</detectOfflineLinks> -->
					<excludePackageNames>*.DATA;*.DATA.*</excludePackageNames>
					<additionalOptions>--frames</additionalOptions> <!-- by default, javadoc does not generate HTML with frames any more! -->
				</configuration>
			</plugin>

		</plugins>
	</build>

	<reporting>
		<plugins>
			<plugin>  
				<!-- to stop Maven complaining about missing version number -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-project-info-reports-plugin</artifactId>
				<version>3.0.0</version>
				<reportSets>
					<reportSet />
				</reportSets>
			</plugin>

			<!-- NEEDED? aggregate JavaDoc (see https://maven.apache.org/plugins/maven-javadoc-plugin/examples/aggregate.html) -->
			<!-- <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-javadoc-plugin</artifactId> 
				<version>3.3.0</version> <reportSets> <reportSet> <id>aggregate</id> <inherited>false</inherited> 
				<reports> <report>aggregate</report> </reports> </reportSet> <reportSet> 
				<id>default</id> <reports> <report>javadoc</report> </reports> </reportSet> 
				</reportSets> </plugin> -->
		</plugins>
	</reporting>

	<!-- ******************* build profiles ************************** -->

	<profiles>

		<profile>
			<id>ij-plugins-build</id>
			<activation>
				<file>
                	<!-- activates this profile if directory ${project.basedir}/ImageJ exists -->
                	<exists>ImageJ</exists> 
            	</file>
			</activation>

			<properties>
				<imagingbook.ijplugins>true</imagingbook.ijplugins>
				<outputDirectory>${project.basedir}${file.separator}ImageJ${file.separator}plugins</outputDirectory>
			</properties>

			<build>
				<plugins>
					<!-- empty the ImageJ/jars/ directory at clean -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-clean-plugin</artifactId>
						<version>3.1.0</version>
						<configuration>
							<filesets>
								<fileset>
									<directory>${project.basedir}/ImageJ/jars</directory>
									<includes>
										<include>**/*</include>
									</includes>
									<followSymlinks>false</followSymlinks>
								</fileset>
							</filesets>
						</configuration>
					</plugin>


					<!-- make a local copy of the current ij.jar for development, 
						see https://maven.apache.org/plugins/maven-dependency-plugin/examples/copying-artifacts.html -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-dependency-plugin</artifactId>
						<executions>
							<execution>
								<id>copy</id>
								<phase>package</phase>
								<goals>
									<goal>copy</goal>
								</goals>
								<configuration>
									<artifactItems>
										<!-- copy ij.jar into ImageJ/ -->
										<artifactItem>
											<groupId>net.imagej</groupId>
											<artifactId>ij</artifactId>
											<outputDirectory>${project.basedir}/ImageJ</outputDirectory>
											<destFileName>ij.jar</destFileName>
										</artifactItem>
									</artifactItems>
									<overWriteIfNewer>true</overWriteIfNewer>
									<overWriteReleases>false</overWriteReleases>
									<overWriteSnapshots>true</overWriteSnapshots>
								</configuration>
							</execution>

							<execution>
								<!-- copy all other dependencies into ImageJ/jars/ -->
								<id>copy-dependencies</id>
								<phase>package</phase>
								<goals>
									<goal>copy-dependencies</goal>
								</goals>
								<configuration>
									<excludeArtifactIds>ij</excludeArtifactIds>
									<outputDirectory>${project.basedir}/ImageJ/jars</outputDirectory>
									<overWriteIfNewer>true</overWriteIfNewer>
									<overWriteReleases>false</overWriteReleases>
									<overWriteSnapshots>true</overWriteSnapshots>
								</configuration>
							</execution>

							<!-- copy the newly installed target jar to ImageJ/jars (could this 
								be a problem?) -->
							<!-- <execution> <id>copy-installed</id> <phase>install</phase> <goals> 
								<goal>copy</goal> </goals> <configuration> <artifactItems> <artifactItem> 
								<groupId>${project.groupId}</groupId> <artifactId>${project.artifactId}</artifactId> 
								<version>${project.version}</version> <type>${project.packaging}</type> </artifactItem> 
								</artifactItems> <outputDirectory>${project.basedir}/ImageJ/jars</outputDirectory> 
								</configuration> </execution> -->

						</executions>
					</plugin>
					<!-- end of copy -->

				</plugins>
			</build>
		</profile>
	</profiles>

</project>